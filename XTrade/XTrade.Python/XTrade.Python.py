
from ast import arg
from calendar import c
from datetime import datetime
from locale import currency
from math import fabs
import profile
from numpy import mat
from yahooquery import Ticker
import threading
import pandas as pd
import sys
import math 
import requests
import time
import re


workspace = "C:\\Development\\XTrade\\Data\\Python"
chunk_size = 1000
time_out = 0

inputs = [
'AA',
'AAL',
'AAOI',
'AAON',
'AAP',
'AAPL',
'AAT',
'AB',
'ABBV',
'ABCB',
'ABEV',
'ABG',
'ABLLL',
'ABM',
'ABNB',
'ABR',
'ABT',
'ACA',
'ACAD',
'ACDC',
'ACGL',
'ACGLN',
'ACGLO',
'ACHC',
'ACHR',
'ACI',
'ACIW',
'ACLS',
'ACLX',
'ACM',
'ACN',
'ACT',
'ACVA',
'ADBE',
'ADC',
'ADEA',
'ADI',
'ADM',
'ADMA',
'ADNT',
'ADP',
'ADSK',
'ADT',
'ADUS',
'AEE',
'AEG',
'AEIS',
'AEM',
'AEO',
'AEP',
'AER',
'AES',
'AESI',
'AFG',
'AFGB',
'AFGC',
'AFGD',
'AFGE',
'AFL',
'AFRM',
'AFYA',
'AG',
'AGCO',
'AGI',
'AGIO',
'AGM',
'AGNC',
'AGNCL',
'AGNCM',
'AGNCN',
'AGNCO',
'AGNCP',
'AGO',
'AGX',
'AGYS',
'AHCO',
'AHR',
'AI',
'AIG',
'AIN',
'AIR',
'AIT',
'AIV',
'AIZ',
'AIZN',
'AJG',
'AKAM',
'AKR',
'AKRO',
'AL',
'ALAB',
'ALB',
'ALC',
'ALE',
'ALEX',
'ALG',
'ALGM',
'ALGN',
'ALGT',
'ALHC',
'ALIT',
'ALK',
'ALKS',
'ALKT',
'ALL',
'ALLE',
'ALLY',
'ALNY',
'ALRM',
'ALSN',
'ALTM',
'ALTR',
'ALV',
'ALVO',
'ALVOW',
'ALX',
'AM',
'AMAL',
'AMAT',
'AMBA',
'AMBP',
'AMC',
'AMCR',
'AMD',
'AME',
'AMED',
'AMG',
'AMGN',
'AMH',
'AMKR',
'AMP',
'AMPH',
'AMPL',
'AMR',
'AMRC',
'AMRX',
'AMT',
'AMTM',
'AMWD',
'AMX',
'AMZN',
'AN',
'ANDE',
'ANET',
'ANF',
'ANIP',
'ANSS',
'AON',
'AORT',
'AOS',
'AOSL',
'APA',
'APAM',
'APD',
'APG',
'APGE',
'APH',
'APLD',
'APLE',
'APLS',
'APO',
'APOG',
'APOS',
'APP',
'APPF',
'APPN',
'APTV',
'AQN',
'AQNB',
'AR',
'ARBKL',
'ARCB',
'ARCC',
'ARCH',
'ARCO',
'ARDT',
'ARDX',
'ARE',
'ARES',
'ARGX',
'ARHS',
'ARI',
'ARIS',
'ARLO',
'ARLP',
'ARM',
'ARMK',
'AROC',
'ARQT',
'ARR',
'ARVN',
'ARW',
'ARWR',
'AS',
'ASAI',
'ASAN',
'ASB',
'ASBA',
'ASGN',
'ASH',
'ASML',
'ASND',
'ASO',
'ASR',
'ASTH',
'ASTL',
'ASTS',
'ASX',
'ATAT',
'ATCOL',
'ATEC',
'ATEN',
'ATGE',
'ATHM',
'ATHS',
'ATI',
'ATKR',
'ATMU',
'ATO',
'ATR',
'ATRC',
'ATS',
'ATSG',
'ATUS',
'AU',
'AUB',
'AUPH',
'AUR',
'AUROW',
'AVA',
'AVAL',
'AVAV',
'AVB',
'AVDL',
'AVDX',
'AVGO',
'AVNT',
'AVO',
'AVPT',
'AVPTW',
'AVT',
'AVTR',
'AVY',
'AWI',
'AWK',
'AWR',
'AX',
'AXON',
'AXP',
'AXS',
'AXSM',
'AXTA',
'AYI',
'AZEK',
'AZN',
'AZO',
'AZPN',
'AZTA',
'AZZ',
'B',
'BA',
'BABA',
'BAC',
'BAH',
'BAK',
'BALL',
'BAM',
'BANC',
'BANF',
'BANR',
'BAP',
'BATRA',
'BATRK',
'BAX',
'BB',
'BBAI',
'BBAR',
'BBD',
'BBDC',
'BBDO',
'BBIO',
'BBSI',
'BBU',
'BBUC',
'BBVA',
'BBWI',
'BBY',
'BC',
'BCC',
'BCE',
'BCH',
'BCO',
'BCPC',
'BCRX',
'BCS',
'BCSF',
'BDC',
'BDJ',
'BDX',
'BE',
'BEAM',
'BECN',
'BEKE',
'BELFA',
'BELFB',
'BEN',
'BEP',
'BEPC',
'BEPH',
'BEPI',
'BEPJ',
'BERY',
'BFAM',
'BFH',
'BG',
'BGC',
'BGNE',
'BGR',
'BHC',
'BHE',
'BHF',
'BHFAL',
'BHFAN',
'BHFAO',
'BHFAP',
'BHLB',
'BHP',
'BHVN',
'BIDU',
'BIGZ',
'BIIB',
'BILI',
'BILL',
'BIO',
'BIP',
'BIPC',
'BIPH',
'BIPJ',
'BIRK',
'BJ',
'BK',
'BKDT',
'BKE',
'BKH',
'BKNG',
'BKR',
'BKT',
'BKU',
'BKV',
'BL',
'BLBD',
'BLCO',
'BLD',
'BLDR',
'BLFS',
'BLK',
'BLKB',
'BLMN',
'BLND',
'BLTE',
'BLX',
'BMA',
'BMI',
'BMO',
'BMRN',
'BMY',
'BN',
'BNH',
'BNJ',
'BNL',
'BNS',
'BNT',
'BNTX',
'BOH',
'BOKF',
'BOOT',
'BOW',
'BOX',
'BP',
'BPMC',
'BPOP',
'BPOPM',
'BPYPM',
'BPYPN',
'BPYPO',
'BPYPP',
'BR',
'BRBR',
'BRC',
'BRDG',
'BRFS',
'BRKL',
'BRKR',
'BRO',
'BROS',
'BRX',
'BRZE',
'BSAC',
'BSBR',
'BSM',
'BSX',
'BSY',
'BTDR',
'BTE',
'BTG',
'BTI',
'BTSG',
'BTSGU',
'BTU',
'BTZ',
'BUD',
'BUR',
'BURL',
'BUSE',
'BV',
'BVN',
'BWA',
'BWIN',
'BWNB',
'BWSN',
'BWXT',
'BX',
'BXMT',
'BXP',
'BY',
'BYD',
'BZ',
'C',
'CAAP',
'CABO',
'CACC',
'CACI',
'CADE',
'CAE',
'CAG',
'CAH',
'CAKE',
'CALM',
'CALX',
'CAMT',
'CAR',
'CARG',
'CARR',
'CARS',
'CART',
'CASH',
'CASY',
'CAT',
'CATY',
'CAVA',
'CB',
'CBOE',
'CBRE',
'CBRL',
'CBSH',
'CBT',
'CBU',
'CBZ',
'CC',
'CCB',
'CCCS',
'CCEC',
'CCEP',
'CCI',
'CCJ',
'CCK',
'CCL',
'CCOI',
'CCS',
'CCU',
'CCZ',
'CDE',
'CDLR',
'CDNA',
'CDNS',
'CDP',
'CDRE',
'CDW',
'CDZIP',
'CE',
'CECO',
'CEG',
'CEIX',
'CELH',
'CENT',
'CENTA',
'CENX',
'CEPU',
'CERT',
'CET',
'CF',
'CFG',
'CFLT',
'CFR',
'CG',
'CGABL',
'CGAU',
'CGBDL',
'CGNX',
'CGON',
'CHCO',
'CHD',
'CHDN',
'CHE',
'CHEF',
'CHH',
'CHKP',
'CHRD',
'CHRW',
'CHT',
'CHTR',
'CHWY',
'CHX',
'CI',
'CIB',
'CIEN',
'CIFR',
'CIG',
'CIGI',
'CII',
'CIM',
'CIMN',
'CINF',
'CIVI',
'CL',
'CLBK',
'CLBT',
'CLDX',
'CLF',
'CLH',
'CLMT',
'CLOV',
'CLS',
'CLSK',
'CLVT',
'CLX',
'CM',
'CMA',
'CMBT',
'CMC',
'CMCO',
'CMCSA',
'CME',
'CMG',
'CMI',
'CMPO',
'CMPR',
'CMRE',
'CMS',
'CMSA',
'CMSC',
'CMSD',
'CNA',
'CNC',
'CNCK',
'CNH',
'CNI',
'CNK',
'CNM',
'CNMD',
'CNNE',
'CNO',
'CNP',
'CNQ',
'CNS',
'CNTA',
'CNX',
'CNXC',
'CNXN',
'COCO',
'CODI',
'COF',
'COHR',
'COHU',
'COIN',
'COKE',
'COLB',
'COLD',
'COLM',
'COMM',
'COMP',
'CON',
'COO',
'COOP',
'COP',
'COR',
'CORT',
'CORZ',
'CORZW',
'CORZZ',
'COST',
'COTY',
'COUR',
'CP',
'CPA',
'CPAY',
'CPB',
'CPK',
'CPNG',
'CPRI',
'CPRT',
'CPRX',
'CPT',
'CQP',
'CR',
'CRAI',
'CRBG',
'CRC',
'CRCT',
'CRDO',
'CRGY',
'CRH',
'CRI',
'CRK',
'CRL',
'CRM',
'CRNX',
'CROX',
'CRS',
'CRSP',
'CRTO',
'CRUS',
'CRVL',
'CRWD',
'CSAN',
'CSCO',
'CSGP',
'CSGS',
'CSL',
'CSQ',
'CSR',
'CSTM',
'CSWC',
'CSWCZ',
'CSWI',
'CSX',
'CTAS',
'CTOS',
'CTRA',
'CTRE',
'CTRI',
'CTS',
'CTSH',
'CTVA',
'CUBE',
'CUBI',
'CUK',
'CURB',
'CUZ',
'CVBF',
'CVCO',
'CVE',
'CVI',
'CVLT',
'CVNA',
'CVS',
'CVX',
'CW',
'CWAN',
'CWEN',
'CWH',
'CWK',
'CWST',
'CWT',
'CX',
'CXM',
'CXT',
'CXW',
'CYBR',
'CYTK',
'CZR',
'D',
'DAC',
'DAL',
'DAN',
'DAR',
'DASH',
'DAVA',
'DAVE',
'DAWN',
'DAY',
'DB',
'DBD',
'DBRG',
'DBX',
'DCBO',
'DCI',
'DCOM',
'DCOMG',
'DD',
'DDOG',
'DDS',
'DE',
'DEA',
'DECK',
'DEI',
'DELL',
'DEO',
'DESP',
'DFH',
'DFIN',
'DFS',
'DG',
'DGII',
'DGX',
'DHCNI',
'DHCNL',
'DHI',
'DHR',
'DHT',
'DINO',
'DIOD',
'DIS',
'DJT',
'DJTWW',
'DK',
'DKL',
'DKNG',
'DKS',
'DLB',
'DLO',
'DLR',
'DLTR',
'DLX',
'DMLP',
'DNB',
'DNLI',
'DNN',
'DNOW',
'DNUT',
'DOC',
'DOCN',
'DOCS',
'DOCU',
'DOLE',
'DOOO',
'DORM',
'DOV',
'DOW',
'DOX',
'DPZ',
'DQ',
'DRH',
'DRI',
'DRS',
'DRVN',
'DSGR',
'DSGX',
'DSL',
'DSP',
'DT',
'DTB',
'DTE',
'DTG',
'DTM',
'DTW',
'DUK',
'DUKB',
'DUOL',
'DV',
'DVA',
'DVAX',
'DVN',
'DXC',
'DXCM',
'DXPE',
'DY',
'DYN',
'E',
'EA',
'EAI',
'EAT',
'EBAY',
'EBC',
'EBR',
'EC',
'ECCC',
'ECCF',
'ECCV',
'ECCW',
'ECCX',
'ECG',
'ECL',
'ECPG',
'ED',
'EDN',
'EDR',
'EDU',
'EE',
'EEFT',
'EFC',
'EFSC',
'EFX',
'EFXT',
'EG',
'EHC',
'EIG',
'EIX',
'EL',
'ELAN',
'ELC',
'ELF',
'ELME',
'ELP',
'ELPC',
'ELS',
'ELV',
'ELVN',
'EMBC',
'EME',
'EMN',
'EMP',
'EMR',
'ENB',
'ENFN',
'ENIC',
'ENJ',
'ENLC',
'ENLT',
'ENO',
'ENOV',
'ENPH',
'ENR',
'ENS',
'ENSG',
'ENTG',
'ENVA',
'ENVX',
'EOG',
'EOSE',
'EPAC',
'EPAM',
'EPC',
'EPD',
'EPR',
'EPRT',
'EQH',
'EQIX',
'EQNR',
'EQR',
'EQT',
'EQX',
'ERIC',
'ERIE',
'ERJ',
'ERO',
'ES',
'ESAB',
'ESE',
'ESGR',
'ESI',
'ESLT',
'ESNT',
'ESRT',
'ESS',
'ESTA',
'ESTC',
'ET',
'ETN',
'ETR',
'ETSY',
'ETV',
'EVCM',
'EVEX',
'EVGO',
'EVH',
'EVO',
'EVR',
'EVRG',
'EVRI',
'EVTC',
'EW',
'EWBC',
'EWTX',
'EXAS',
'EXC',
'EXE',
'EXEEL',
'EXEL',
'EXLS',
'EXOD',
'EXP',
'EXPD',
'EXPE',
'EXPI',
'EXPO',
'EXR',
'EXTR',
'F',
'FA',
'FAF',
'FANG',
'FAST',
'FBIN',
'FBK',
'FBMS',
'FBNC',
'FBP',
'FBRT',
'FBYD',
'FCF',
'FCFS',
'FCN',
'FCNCA',
'FCPT',
'FCX',
'FDP',
'FDS',
'FDX',
'FE',
'FELE',
'FER',
'FERG',
'FFBC',
'FFIN',
'FFIV',
'FG',
'FGN',
'FHB',
'FHI',
'FHN',
'FI',
'FIBK',
'FICO',
'FIGS',
'FIHL',
'FINV',
'FIS',
'FITB',
'FITBI',
'FITBO',
'FITBP',
'FIVE',
'FIVN',
'FIX',
'FIZZ',
'FL',
'FLEX',
'FLG',
'FLNC',
'FLNG',
'FLO',
'FLR',
'FLS',
'FLUT',
'FLYW',
'FMC',
'FMS',
'FMX',
'FN',
'FNB',
'FND',
'FNF',
'FNV',
'FOLD',
'FOR',
'FORM',
'FORTY',
'FOUR',
'FOX',
'FOXA',
'FOXF',
'FR',
'FRA',
'FRHC',
'FRME',
'FRMEP',
'FRO',
'FROG',
'FRPT',
'FRSH',
'FRT',
'FSCO',
'FSK',
'FSLR',
'FSLY',
'FSM',
'FSS',
'FSUN',
'FSV',
'FTAI',
'FTAIM',
'FTAIN',
'FTAIO',
'FTDR',
'FTI',
'FTNT',
'FTRE',
'FTS',
'FTV',
'FUL',
'FULT',
'FULTP',
'FUN',
'FUTU',
'FVRR',
'FWONA',
'FWONK',
'FWRG',
'FYBR',
'G',
'GAB',
'GABC',
'GAM',
'GAP',
'GATX',
'GB',
'GBCI',
'GBDC',
'GBTG',
'GBX',
'GCMG',
'GD',
'GDDY',
'GDRX',
'GDS',
'GDV',
'GDYN',
'GE',
'GEAR',
'GEF',
'GEHC',
'GEL',
'GEN',
'GENI',
'GEO',
'GERN',
'GEV',
'GFF',
'GFI',
'GFL',
'GFS',
'GGAL',
'GGB',
'GGG',
'GH',
'GHC',
'GIB',
'GIGGU',
'GIII',
'GIL',
'GILD',
'GIS',
'GJS',
'GKOS',
'GL',
'GLBE',
'GLNG',
'GLOB',
'GLP',
'GLPG',
'GLPI',
'GLW',
'GM',
'GMAB',
'GME',
'GMED',
'GMS',
'GNL',
'GNRC',
'GNTX',
'GNW',
'GO',
'GOGL',
'GOLD',
'GOLF',
'GOOG',
'GOOGL',
'GPC',
'GPCR',
'GPI',
'GPK',
'GPN',
'GPOR',
'GRAB',
'GRABW',
'GRBK',
'GRDN',
'GRFS',
'GRMN',
'GRND',
'GS',
'GSAT',
'GSBD',
'GSHD',
'GSK',
'GT',
'GTES',
'GTLB',
'GTLS',
'GTX',
'GTY',
'GVA',
'GWRE',
'GWW',
'GXO',
'GYRE',
'H',
'HAE',
'HAL',
'HALO',
'HAS',
'HASI',
'HAYW',
'HBAN',
'HBANL',
'HBANM',
'HBANP',
'HBI',
'HBM',
'HCA',
'HCC',
'HCI',
'HCM',
'HCP',
'HCXY',
'HD',
'HDB',
'HDL',
'HE',
'HEES',
'HEI',
'HELE',
'HEPS',
'HES',
'HESM',
'HG',
'HGTY',
'HGV',
'HHH',
'HI',
'HIG',
'HII',
'HIMS',
'HIMX',
'HIW',
'HL',
'HLI',
'HLIO',
'HLIT',
'HLMN',
'HLN',
'HLNE',
'HLT',
'HLX',
'HMC',
'HMN',
'HMY',
'HNI',
'HOG',
'HOLX',
'HOMB',
'HON',
'HOOD',
'HOPE',
'HP',
'HPE',
'HPK',
'HPQ',
'HQY',
'HR',
'HRB',
'HRI',
'HRL',
'HRMY',
'HROW',
'HSAI',
'HSBC',
'HSIC',
'HST',
'HSY',
'HTGC',
'HTH',
'HTHT',
'HTLF',
'HTLFP',
'HTZ',
'HUBB',
'HUBG',
'HUBS',
'HUM',
'HUN',
'HURN',
'HUT',
'HWC',
'HWCPZ',
'HWKN',
'HWM',
'HXL',
'IAC',
'IAG',
'IART',
'IAS',
'IBKR',
'IBM',
'IBN',
'IBOC',
'IBP',
'IBRX',
'IBTA',
'IBTX',
'ICE',
'ICFI',
'ICHR',
'ICL',
'ICLR',
'ICUI',
'IDA',
'IDCC',
'IDT',
'IDXX',
'IDYA',
'IEP',
'IESC',
'IEX',
'IFF',
'IFS',
'IGIC',
'IGT',
'IHG',
'IIPR',
'ILMN',
'IMAX',
'IMCR',
'IMKTA',
'IMO',
'IMVT',
'INCY',
'INDB',
'INDV',
'INFA',
'INFN',
'INFY',
'ING',
'INGM',
'INGR',
'INMD',
'INOD',
'INSM',
'INSP',
'INSW',
'INTA',
'INTC',
'INTR',
'INTU',
'INVA',
'INVH',
'IONQ',
'IONS',
'IOSP',
'IOT',
'IOVA',
'IP',
'IPAR',
'IPG',
'IPGP',
'IQ',
'IQV',
'IR',
'IRDM',
'IREN',
'IRM',
'IRON',
'IRS',
'IRT',
'IRTC',
'ISRG',
'IT',
'ITCI',
'ITGR',
'ITRI',
'ITT',
'ITUB',
'ITW',
'IVT',
'IVZ',
'IX',
'J',
'JAMF',
'JANX',
'JAZZ',
'JBGS',
'JBHT',
'JBI',
'JBL',
'JBLU',
'JBT',
'JCI',
'JD',
'JEF',
'JHG',
'JHX',
'JJSF',
'JKHY',
'JKS',
'JLL',
'JNJ',
'JNPR',
'JOBY',
'JOE',
'JPM',
'JSM',
'JWN',
'JXN',
'K',
'KAI',
'KALU',
'KAR',
'KARO',
'KB',
'KBH',
'KBR',
'KC',
'KD',
'KDP',
'KEN',
'KEP',
'KEX',
'KEY',
'KEYS',
'KFRC',
'KFY',
'KGC',
'KGS',
'KHC',
'KIM',
'KKR',
'KKRS',
'KLAC',
'KLC',
'KLG',
'KLIC',
'KMB',
'KMI',
'KMPB',
'KMPR',
'KMT',
'KMX',
'KN',
'KNF',
'KNSA',
'KNSL',
'KNTK',
'KNX',
'KO',
'KOF',
'KOS',
'KR',
'KRC',
'KRG',
'KRNT',
'KRO',
'KRP',
'KRUS',
'KRYS',
'KSPI',
'KSS',
'KT',
'KTB',
'KTOS',
'KVUE',
'KVYO',
'KW',
'KWR',
'KYMR',
'KYN',
'L',
'LAD',
'LADR',
'LAMR',
'LANC',
'LAUR',
'LAZ',
'LB',
'LBRDA',
'LBRDK',
'LBRDP',
'LBRT',
'LBTYA',
'LBTYB',
'LBTYK',
'LC',
'LCID',
'LCII',
'LDOS',
'LEA',
'LECO',
'LEG',
'LEGN',
'LEN',
'LEU',
'LEVI',
'LFST',
'LFUS',
'LGIH',
'LGND',
'LH',
'LHX',
'LI',
'LIF',
'LII',
'LILA',
'LILAK',
'LIN',
'LINE',
'LITE',
'LIVN',
'LKFN',
'LKQ',
'LLY',
'LLYVA',
'LLYVK',
'LMAT',
'LMND',
'LMT',
'LNC',
'LNG',
'LNN',
'LNT',
'LNTH',
'LNW',
'LOAR',
'LOB',
'LOGI',
'LOMA',
'LOPE',
'LOW',
'LPG',
'LPL',
'LPLA',
'LPX',
'LRCX',
'LRN',
'LSCC',
'LSPD',
'LSTR',
'LTC',
'LTH',
'LTM',
'LU',
'LUCK',
'LULU',
'LUMN',
'LUNR',
'LUNRW',
'LUV',
'LVS',
'LW',
'LXP',
'LYB',
'LYFT',
'LYG',
'LYV',
'LZ',
'LZB',
'M',
'MA',
'MAA',
'MAC',
'MAG',
'MAIN',
'MAN',
'MANH',
'MANU',
'MAR',
'MARA',
'MAS',
'MASI',
'MAT',
'MATX',
'MBC',
'MBIN',
'MBINM',
'MBINO',
'MBLY',
'MC',
'MCD',
'MCHP',
'MCK',
'MCO',
'MCRI',
'MCW',
'MCY',
'MD',
'MDB',
'MDGL',
'MDLZ',
'MDT',
'MDU',
'MDXG',
'MEDP',
'MELI',
'MEOH',
'MESO',
'MET',
'META',
'METCL',
'MFA',
'MFAN',
'MFAO',
'MFC',
'MFG',
'MFIC',
'MFICL',
'MGA',
'MGEE',
'MGM',
'MGNI',
'MGRC',
'MGY',
'MHD',
'MHK',
'MHLA',
'MHN',
'MHNC',
'MHO',
'MIDD',
'MIR',
'MIRM',
'MIY',
'MKC',
'MKL',
'MKSI',
'MKTX',
'MLCO',
'MLI',
'MLKN',
'MLM',
'MLNK',
'MLTX',
'MMC',
'MMI',
'MMM',
'MMS',
'MMSI',
'MMYT',
'MNDY',
'MNKD',
'MNR',
'MNSO',
'MNST',
'MO',
'MOBBW',
'MOD',
'MODG',
'MOH',
'MOMO',
'MORN',
'MOS',
'MP',
'MPC',
'MPLX',
'MPW',
'MPWR',
'MQ',
'MQT',
'MQY',
'MRC',
'MRCY',
'MRK',
'MRNA',
'MRTN',
'MRUS',
'MRVI',
'MRVL',
'MRX',
'MS',
'MSA',
'MSC',
'MSCI',
'MSFT',
'MSGE',
'MSGS',
'MSI',
'MSM',
'MSTR',
'MT',
'MTB',
'MTCH',
'MTD',
'MTDR',
'MTG',
'MTH',
'MTN',
'MTRN',
'MTSI',
'MTTR',
'MTX',
'MTZ',
'MU',
'MUA',
'MUC',
'MUE',
'MUFG',
'MUI',
'MUJ',
'MUR',
'MUSA',
'MVF',
'MVT',
'MWA',
'MXL',
'MYD',
'MYGN',
'MYI',
'MYRG',
'NABL',
'NAMS',
'NAMSW',
'NAN',
'NARI',
'NATL',
'NAVI',
'NBHC',
'NBIS',
'NBIX',
'NBTB',
'NCLH',
'NCNO',
'NDAQ',
'NDSN',
'NE',
'NEE',
'NEM',
'NEO',
'NEOG',
'NEP',
'NET',
'NEU',
'NEXA',
'NEXT',
'NFE',
'NFG',
'NFLX',
'NG',
'NGD',
'NGG',
'NGVT',
'NHC',
'NHI',
'NI',
'NIC',
'NICE',
'NIO',
'NJR',
'NKE',
'NLY',
'NMFC',
'NMFCZ',
'NMIH',
'NMM',
'NMR',
'NMRA',
'NMRK',
'NN',
'NNI',
'NNN',
'NOC',
'NOG',
'NOK',
'NOMD',
'NOV',
'NOVT',
'NOW',
'NPO',
'NPWR',
'NRG',
'NRIX',
'NRP',
'NSA',
'NSC',
'NSIT',
'NSP',
'NSSC',
'NTAP',
'NTB',
'NTCT',
'NTES',
'NTLA',
'NTNX',
'NTR',
'NTRA',
'NTRS',
'NTRSO',
'NTST',
'NU',
'NUE',
'NUVL',
'NVAX',
'NVCR',
'NVDA',
'NVEE',
'NVGS',
'NVMI',
'NVO',
'NVR',
'NVS',
'NVST',
'NVT',
'NWBI',
'NWE',
'NWG',
'NWL',
'NWN',
'NWS',
'NWSA',
'NX',
'NXE',
'NXPI',
'NXRT',
'NXST',
'NXT',
'NYAX',
'NYMTI',
'NYMTL',
'NYMTM',
'NYMTN',
'NYMTZ',
'NYT',
'O',
'OBDC',
'OBDE',
'OBK',
'OC',
'OCFC',
'OCFCP',
'OCSL',
'OCUL',
'ODD',
'ODFL',
'OFG',
'OGE',
'OGN',
'OGS',
'OHI',
'OI',
'OII',
'OKE',
'OKLO',
'OKTA',
'OLED',
'OLLI',
'OLN',
'OLO',
'OLPX',
'OMAB',
'OMC',
'OMCL',
'OMF',
'ON',
'ONB',
'ONBPO',
'ONBPP',
'ONON',
'ONTO',
'OPCH',
'OPEN',
'OPK',
'OPRA',
'OR',
'ORA',
'ORCL',
'ORI',
'ORLA',
'ORLY',
'OS',
'OSCR',
'OSIS',
'OSK',
'OSW',
'OTEX',
'OTIS',
'OTTR',
'OUT',
'OVV',
'OWL',
'OXLCL',
'OXLCN',
'OXLCO',
'OXLCP',
'OXLCZ',
'OXM',
'OXSQG',
'OXY',
'OZK',
'OZKAP',
'PAA',
'PAAS',
'PAC',
'PACS',
'PAG',
'PAGP',
'PAGS',
'PAM',
'PANW',
'PAR',
'PARA',
'PARAA',
'PATH',
'PATK',
'PAX',
'PAY',
'PAYC',
'PAYO',
'PAYX',
'PB',
'PBA',
'PBF',
'PBH',
'PBI',
'PBR',
'PCAR',
'PCG',
'PCH',
'PCOR',
'PCT',
'PCTTU',
'PCTY',
'PCVX',
'PD',
'PDCO',
'PDD',
'PDFS',
'PDI',
'PDM',
'PDO',
'PEB',
'PEBO',
'PECO',
'PEG',
'PEGA',
'PEN',
'PENG',
'PENN',
'PEP',
'PFBC',
'PFE',
'PFG',
'PFGC',
'PFH',
'PFS',
'PFSI',
'PG',
'PGNY',
'PGR',
'PGRE',
'PH',
'PHG',
'PHI',
'PHIN',
'PHM',
'PHR',
'PI',
'PII',
'PINC',
'PINS',
'PIPR',
'PLTR',
'PJT',
'PK',
'PKG',
'PKX',
'PL',
'PLAB',
'PLAY',
'PLD',
'PLMR',
'PLNT',
'PLSE',
'PLTK',
'PLTR',
'PLUG',
'PLUS',
'PLXS',
'PLYA',
'PM',
'PMT',
'PMTU',
'PNC',
'PNFP',
'PNFPP',
'PNR',
'PNW',
'PODD',
'PONY',
'POOL',
'POR',
'POST',
'POWI',
'POWL',
'POWWP',
'PPBI',
'PPC',
'PPG',
'PPL',
'PR',
'PRAX',
'PRCT',
'PRDO',
'PRG',
'PRGO',
'PRGS',
'PRH',
'PRI',
'PRIM',
'PRK',
'PRKS',
'PRM',
'PRMB',
'PRO',
'PRS',
'PRU',
'PRVA',
'PSA',
'PSEC',
'PSFE',
'PSMT',
'PSN',
'PSNY',
'PSO',
'PSTG',
'PSX',
'PTA',
'PTC',
'PTCT',
'PTEN',
'PTGX',
'PTON',
'PTVE',
'PUK',
'PVH',
'PWP',
'PWR',
'PX',
'PYCR',
'PYPL',
'PZZA',
'QBTS',
'QCOM',
'QCRH',
'QDEL',
'QFIN',
'QGEN',
'QLYS',
'QNST',
'QRTEB',
'QRTEP',
'QRVO',
'QS',
'QSR',
'QTWO',
'QUBT',
'QXO',
'R',
'RACE',
'RAMP',
'RARE',
'RBA',
'RBC',
'RBCAA',
'RBLX',
'RBRK',
'RC',
'RCAT',
'RCB',
'RCC',
'RCI',
'RCKT',
'RCL',
'RCUS',
'RDDT',
'RDN',
'RDNT',
'RDW',
'RDY',
'REAL',
'REG',
'REGCO',
'REGCP',
'REGN',
'RELX',
'RELY',
'RES',
'REVG',
'REXR',
'REYN',
'REZI',
'RF',
'RGA',
'RGEN',
'RGLD',
'RGTI',
'RGTIW',
'RH',
'RHI',
'RHP',
'RIG',
'RIO',
'RIOT',
'RITM',
'RIVN',
'RJF',
'RKLB',
'RKT',
'RL',
'RLI',
'RLJ',
'RLX',
'RMBS',
'RMD',
'RNA',
'RNG',
'RNP',
'RNR',
'RNST',
'ROAD',
'ROCK',
'ROG',
'ROIC',
'ROIV',
'ROK',
'ROKU',
'ROL',
'ROOT',
'ROP',
'ROST',
'RPD',
'RPM',
'RPRX',
'RQI',
'RRC',
'RRR',
'RRX',
'RS',
'RSG',
'RSI',
'RTO',
'RTX',
'RUM',
'RUMBW',
'RUN',
'RUSHA',
'RUSHB',
'RVLV',
'RVMD',
'RVT',
'RVTY',
'RWTN',
'RWTO',
'RXO',
'RXRX',
'RXST',
'RY',
'RYAAY',
'RYAN',
'RYN',
'RYTM',
'RZB',
'RZC',
'S',
'SA',
'SABR',
'SAFE',
'SAFT',
'SAH',
'SAIA',
'SAIC',
'SAM',
'SAN',
'SAND',
'SANM',
'SAP',
'SARO',
'SASR',
'SATS',
'SBAC',
'SBBA',
'SBCF',
'SBGI',
'SBH',
'SBLK',
'SBRA',
'SBS',
'SBSW',
'SBUX',
'SCCC',
'SCCD',
'SCCO',
'SCHW',
'SCI',
'SCL',
'SCS',
'SCSC',
'SDGR',
'SDHC',
'SDRL',
'SE',
'SEB',
'SEE',
'SEI',
'SEIC',
'SEM',
'SEMR',
'SEPN',
'SEZL',
'SF',
'SFB',
'SFBS',
'SFL',
'SFM',
'SFNC',
'SG',
'SGHC',
'SGML',
'SGRY',
'SHAK',
'SHC',
'SHCO',
'SHEL',
'SHG',
'SHO',
'SHOO',
'SHOP',
'SHW',
'SID',
'SIG',
'SIGI',
'SIGIP',
'SII',
'SILA',
'SILV',
'SIM',
'SIMO',
'SIRI',
'SITE',
'SITM',
'SJM',
'SJW',
'SKM',
'SKT',
'SKWD',
'SKX',
'SKY',
'SKYW',
'SLAB',
'SLB',
'SLF',
'SLG',
'SLGN',
'SLM',
'SLMBP',
'SLNO',
'SLVM',
'SM',
'SMAR',
'SMCI',
'SMFG',
'SMG',
'SMPL',
'SMR',
'SMTC',
'SMWB',
'SN',
'SNA',
'SNAP',
'SNDR',
'SNDX',
'SNEX',
'SNN',
'SNOW',
'SNPS',
'SNRE',
'SNV',
'SNX',
'SNY',
'SO',
'SOBO',
'SOC',
'SOFI',
'SOJC',
'SOJD',
'SOJE',
'SOLV',
'SON',
'SONO',
'SONY',
'SOUN',
'SOUNW',
'SPB',
'SPG',
'SPGI',
'SPH',
'SPHR',
'SPNS',
'SPNT',
'SPOT',
'SPR',
'SPRY',
'SPSC',
'SPT',
'SPXC',
'SQ',
'SQM',
'SR',
'SRAD',
'SRCE',
'SRE',
'SREA',
'SRPT',
'SRRK',
'SSB',
'SSD',
'SSL',
'SSNC',
'SSRM',
'SSTK',
'ST',
'STAA',
'STAG',
'STBA',
'STC',
'STE',
'STEL',
'STEP',
'STGW',
'STLA',
'STLD',
'STM',
'STN',
'STNE',
'STNG',
'STR',
'STRA',
'STRL',
'STT',
'STVN',
'STWD',
'STX',
'STZ',
'SU',
'SUI',
'SUM',
'SUN',
'SUPN',
'SUPV',
'SUZ',
'SVV',
'SW',
'SWI',
'SWK',
'SWKS',
'SWTX',
'SWX',
'SXI',
'SXT',
'SYBT',
'SYF',
'SYK',
'SYM',
'SYNA',
'SYRE',
'SYY',
'T',
'TAC',
'TAK',
'TAL',
'TALO',
'TAP',
'TARS',
'TASK',
'TBBB',
'TBBK',
'TBLA',
'TCBI',
'TCBK',
'TCOM',
'TD',
'TDC',
'TDG',
'TDOC',
'TDS',
'TDW',
'TDY',
'TEAM',
'TECH',
'TECK',
'TEF',
'TEL',
'TEM',
'TENB',
'TEO',
'TER',
'TEVA',
'TEX',
'TFC',
'TFII',
'TFIN',
'TFPM',
'TFSL',
'TFX',
'TGI',
'TGLS',
'TGNA',
'TGS',
'TGT',
'TGTX',
'THC',
'THG',
'THO',
'THRM',
'THS',
'TIGO',
'TIGR',
'TILE',
'TIMB',
'TIXT',
'TJX',
'TKC',
'TKO',
'TKR',
'TLK',
'TLN',
'TLRY',
'TLX',
'TM',
'TMDX',
'TME',
'TMHC',
'TMO',
'TMUS',
'TNC',
'TNDM',
'TNET',
'TNK',
'TNL',
'TOL',
'TOST',
'TOWN',
'TPB',
'TPC',
'TPG',
'TPGXL',
'TPH',
'TPL',
'TPR',
'TPX',
'TR',
'TREX',
'TRGP',
'TRI',
'TRINI',
'TRINL',
'TRINZ',
'TRIP',
'TRMB',
'TRMD',
'TRMK',
'TRN',
'TRNO',
'TROW',
'TROX',
'TRP',
'TRU',
'TRUP',
'TRV',
'TS',
'TSCO',
'TSEM',
'TSLA',
'TSLX',
'TSM',
'TSN',
'TT',
'TTC',
'TTD',
'TTE',
'TTEK',
'TTMI',
'TTWO',
'TU',
'TUYA',
'TVE',
'TVTX',
'TW',
'TWFG',
'TWLO',
'TWO',
'TWST',
'TX',
'TXG',
'TXN',
'TXNM',
'TXRH',
'TXT',
'TY',
'TYL',
'U',
'UA',
'UAA',
'UAL',
'UBER',
'UBS',
'UBSI',
'UCB',
'UCTT',
'UDMY',
'UDR',
'UE',
'UEC',
'UFPI',
'UFPT',
'UGI',
'UGP',
'UHAL',
'UHS',
'UI',
'UL',
'ULCC',
'ULH',
'ULS',
'ULTA',
'UMBF',
'UMC',
'UMH',
'UNF',
'UNFI',
'UNH',
'UNIT',
'UNM',
'UNMA',
'UNP',
'UP',
'UPBD',
'UPS',
'UPST',
'UPWK',
'URBN',
'URI',
'USAC',
'USB',
'USFD',
'USLM',
'USM',
'USPH',
'UTHR',
'UTI',
'UTZ',
'UVV',
'UWMC',
'UZD',
'UZE',
'UZF',
'V',
'VAC',
'VAL',
'VALE',
'VBTX',
'VC',
'VCEL',
'VCTR',
'VCYT',
'VECO',
'VEEV',
'VEON',
'VERA',
'VERX',
'VET',
'VFC',
'VFS',
'VIAV',
'VICI',
'VICR',
'VIK',
'VIPS',
'VIR',
'VIRT',
'VIST',
'VITL',
'VIV',
'VKTX',
'VLO',
'VLTO',
'VLY',
'VLYPO',
'VLYPP',
'VMC',
'VMEO',
'VMI',
'VNET',
'VNO',
'VNOM',
'VNT',
'VOD',
'VOYA',
'VRDN',
'VRE',
'VRN',
'VRNA',
'VRNS',
'VRNT',
'VRRM',
'VRSK',
'VRSN',
'VRT',
'VRTS',
'VRTX',
'VSAT',
'VSCO',
'VSEC',
'VSH',
'VST',
'VSTS',
'VTEX',
'VTLE',
'VTMX',
'VTR',
'VTRS',
'VVV',
'VVX',
'VYX',
'VZ',
'W',
'WAB',
'WAFD',
'WAFDP',
'WAL',
'WAT',
'WAY',
'WB',
'WBA',
'WBD',
'WBS',
'WBTN',
'WCC',
'WCN',
'WD',
'WDAY',
'WDC',
'WDFC',
'WDS',
'WEAV',
'WEC',
'WELL',
'WEN',
'WERN',
'WES',
'WEX',
'WF',
'WFC',
'WFG',
'WFRD',
'WGO',
'WGS',
'WH',
'WHD',
'WHR',
'WINA',
'WING',
'WIT',
'WIX',
'WK',
'WKC',
'WLFC',
'WLK',
'WLY',
'WLYB',
'WM',
'WMB',
'WMG',
'WMK',
'WMS',
'WMT',
'WNS',
'WOOF',
'WOR',
'WPC',
'WPM',
'WPP',
'WRB',
'WRBY',
'WRD',
'WS',
'WSBC',
'WSBCP',
'WSC',
'WSFS',
'WSM',
'WSO',
'WST',
'WT',
'WTFC',
'WTFCM',
'WTFCP',
'WTM',
'WTRG',
'WTS',
'WTTR',
'WTW',
'WU',
'WULF',
'WVE',
'WWD',
'WWW',
'WY',
'WYNN',
'X',
'XEL',
'XENE',
'XHR',
'XMTR',
'XNCR',
'XOM',
'XP',
'XPEL',
'XPEV',
'XPO',
'XPRO',
'XRAY',
'XRX',
'XYL',
'YELP',
'YETI',
'YMM',
'YOU',
'YPF',
'YUM',
'YUMC',
'YY',
'Z',
'ZBH',
'ZBRA',
'ZD',
'ZETA',
'ZG',
'ZGN',
'ZI',
'ZIM',
'ZION',
'ZIONP',
'ZK',
'ZLAB',
'ZM',
'ZS',
'ZTO',
'ZTS',
'ZUO',
'ZWS'
]

#write to local storage
def WriteToLocal(content,filename):
    try:
        with open(f"{workspace}\\{filename}", 'w',encoding='utf-8') as file:
            file.write(content)

        print(f"Finished writing data to {filename}");
    except Exception as e:
        print(f"Error on printing: {e}")

# get company's profile
def GetProfiles(inputs):
   
    print('Fetching profiles...')
   
    content = ["Symbol,Sector,Industry,NoEmployees,Profile\n"]
    datasets = [inputs[i:i + chunk_size] for i in range(0, len(inputs), chunk_size)]

    for ds in datasets:
        print(ds)
        
        tickers = Ticker(ds)
        profile = tickers.summary_profile

        for s, dr in profile.items():
            try:
                if s == "error":
                    continue

                sector = None
                if "sector" in dr:
                    sector = dr["sector"]

                industry = None
                if "industry" in dr:
                    industry = dr["industry"]

                fullTimeEmployees = None
                if "fullTimeEmployees" in dr:
                    fullTimeEmployees = dr["fullTimeEmployees"]

                summary = None
                if "longBusinessSummary" in dr:
                    summary = dr["longBusinessSummary"]
                    summary = re.sub(r'[^a-zA-Z0-9 ]', '', summary)
                
                content.append(f"{s},{sector},{industry},{fullTimeEmployees},{summary}\n")

            except Exception as e:
                print(f"err on parsing profile : {s} - {e}")  

        time.sleep(time_out) 

    WriteToLocal("".join(content),"profiles.txt")

#get quotes
def GetRealTimeQuotes(inputs):

    print('Fetching real-time quotes...')

    content = ["Symbol,MarketPrice,FiftyTwoWeekLow,FiftyTwoWeekHigh,MarketCap,SharesOutstanding,TrailingPE,ForwardPE,EPSTrailingTwelveMonths,ForwardEPS,FiftyDayAverage,TwoHundredDayAverage\n"]
    datasets = [inputs[i:i + chunk_size] for i in range(0, len(inputs), chunk_size)]

    for ds in datasets:
        print (ds)

        tickers = Ticker(ds)
        quotes = tickers.quotes

        for s, dr in quotes.items():
            try:

                if s == "error":
                    continue

                currency = None
                if "currency" in dr:
                    currency = dr["currency"]

                if(currency != 'USD'):
                    continue

                regularMarketPrice = math.nan
                if "regularMarketPrice" in dr:
                    regularMarketPrice = dr["regularMarketPrice"]
           
                fiftyTwoWeekLow = math.nan
                if "fiftyTwoWeekLow" in dr:
                    fiftyTwoWeekLow = dr["fiftyTwoWeekLow"]
           
                fiftyTwoWeekHigh = math.nan
                if "fiftyTwoWeekHigh" in dr:
                    fiftyTwoWeekHigh = dr["fiftyTwoWeekHigh"]
           
                marketCap = math.nan
                if "marketCap" in dr:
                    marketCap = dr["marketCap"]
           
                sharesOutstanding = math.nan
                if "sharesOutstanding" in dr:
                    sharesOutstanding = dr["sharesOutstanding"]

                trailingPE = math.nan
                if "trailingPE" in dr:
                    trailingPE = dr["trailingPE"]
           
                forwardPE = math.nan
                if "forwardPE" in dr:
                    forwardPE = dr["forwardPE"]
           
                epsTrailingTwelveMonths = math.nan
                if "epsTrailingTwelveMonths" in dr:
                    epsTrailingTwelveMonths = dr["epsTrailingTwelveMonths"]
           
                epsForward = math.nan
                if "epsForward" in dr:
                    epsForward = dr["epsForward"]
           
                fiftyDayAverage = math.nan
                if "fiftyDayAverage" in dr:
                    fiftyDayAverage = dr["fiftyDayAverage"]
           
                twoHundredDayAverage = math.nan
                if "twoHundredDayAverage" in dr:
                    twoHundredDayAverage = dr["twoHundredDayAverage"]
        
                content.append(f"{s.upper()},{regularMarketPrice},{fiftyTwoWeekLow},{fiftyTwoWeekHigh},{marketCap},{sharesOutstanding},{trailingPE},{forwardPE},{epsTrailingTwelveMonths},{epsForward},{fiftyDayAverage},{twoHundredDayAverage}\n")
           
            except Exception as e:
                print(f"err on parsing quote : {s} - {e}")  

        time.sleep(time_out) 

    WriteToLocal("".join(content),"quotes.txt")

# get statstics from yahoo
def GetValuationMeasures(inputs):

    print('Fetching valuation measures...')

    content = ["Symbol,PeriodType,MarketCap,FowardPeRatio,PeRatio,PegRatio,PsRatio,PbRatio,EnterpriseValue,EnterprisesValueEBITDARatio,EnterprisesValueRevenueRatio\n"]
    datasets = [inputs[i:i + chunk_size] for i in range(0, len(inputs), chunk_size)]

    for ds in datasets:
        print (ds)

        tickers = Ticker(ds)
        measures = tickers.valuation_measures

        df = pd.DataFrame(measures)
        reversed_df = df.iloc[::-1]

        processTTM = False
        tempSymbol = None

        for s, dr in reversed_df.iterrows():

            try:
                
                if s == "error":
                    continue

                if(tempSymbol != None and tempSymbol != s):
                    processTTM = False

                periodType = dr["periodType"]

                if processTTM == False or periodType == "3M":
            
                    if(periodType == "3M"):
                        periodType = datetime.strptime(str(dr["asOfDate"]), "%Y-%m-%d %H:%M:%S")

                    marketCap = math.nan
                    if "MarketCap" in dr and not math.isnan(float(dr["MarketCap"])):
                        marketCap = dr["MarketCap"]

                    forwardPe = math.nan
                    if "ForwardPeRatio" in dr and not math.isnan(float(dr["ForwardPeRatio"])):
                        forwardPe = dr["ForwardPeRatio"]
           
                    Pe = math.nan
                    if "PeRatio" in dr and not math.isnan(float(dr["PeRatio"])):
                        Pe = dr["PeRatio"]
           
                    Peg = math.nan
                    if "PegRatio" in dr and not math.isnan(float(dr["PegRatio"])):
                        Peg = dr["PegRatio"]
            
                    Ps = math.nan
                    if "PsRatio" in dr and not math.isnan(float(dr["PsRatio"])):
                        Ps = dr["PsRatio"]
           
                    Pb = math.nan
                    if "PbRatio" in dr and not math.isnan(float(dr["PbRatio"])):
                        Pb = dr["PbRatio"]

                    enterpriseValue = math.nan
                    if "EnterpriseValue" in dr and not math.isnan(float(dr["EnterpriseValue"])):
                        enterpriseValue = dr["EnterpriseValue"]
            
                    enterpriseValueEBITDA = math.nan
                    if "EnterprisesValueEBITDARatio" in dr and not math.isnan(float(dr["EnterprisesValueEBITDARatio"])):
                        enterpriseValueEBITDA = dr["EnterprisesValueEBITDARatio"]
            
                    enterpriseValueRevenue = math.nan
                    if "EnterprisesValueRevenueRatio" in dr and not math.isnan(float(dr["EnterprisesValueRevenueRatio"])):
                        enterpriseValueRevenue = dr["EnterprisesValueRevenueRatio"]

                    content.append(f"{s.upper()},{periodType},{marketCap},{forwardPe},{Pe},{Peg},{Ps},{Pb},{enterpriseValue},{enterpriseValueEBITDA},{enterpriseValueRevenue}\n")

                    processTTM = True
                    tempSymbol = s

            except Exception as e:
                print(f"err on parsing measures : {s} - {e}")  

        time.sleep(time_out) 

    WriteToLocal("".join(content),"valuation_measures_q.txt")

# get income, balance sheet, cash flow stm from yahoo
def GetFinancialStatements(inputs,freq):
    
    print(f'Fetching {freq} financial statements...')
    
    types = ['TotalRevenue', 'GrossProfit', 'OperatingExpense', 'OperatingIncome','EBIT', 'NetIncome','StockholdersEquity','TotalAssets','TotalLiabilitiesNetMinorityInterest','CurrentAssets',
             'CurrentLiabilities', 'TotalDebt', 'WorkingCapital', 'Inventory','OperatingRevenue', 'CostOfRevenue', 'OperatingCashFlow', 'LongTermDebt',
             'InvestingCashFlow','CashFlowFromContinuingFinancingActivities','BeginningCashPosition','EndCashPosition','FreeCashFlow','RepaymentOfDebt','RepurchaseOfCapitalStock','CashDividendsPaid',
             'CommonStockIssuance','ChangeInWorkingCapital','CapitalExpenditure','SaleOfInvestment','PurchaseOfInvestment','ChangeInInventory','PurchaseOfBusiness','StockBasedCompensation',
             'InterestExpense','CurrentDebt','BasicEPS','CashCashEquivalentsAndShortTermInvestments', 'TotalCapitalization','ShareIssued','EBITDA', 'NetPPE', 'AccountsReceivable', 'AccountsPayable',
             'SellingGeneralAndAdministration','ResearchAndDevelopment','NetDebt','MarketCap','ChangesInAccountReceivables','ChangeInAccountPayable','PreferredStockEquity','PretaxIncome','TaxProvision',
             'OrdinarySharesNumber','DepreciationAndAmortization','DeferredIncomeTax']
    
    content = ["Symbol,AsofDate,PeriodType,CurrencyCode,TotalRevenue,GrossProfit,OperatingExpense,OperatingIncome,EBIT,NetIncome,StockholdersEquity,TotalAssets,TotalLiabilities,CurrentAssets,CurrentLiabilities,TotalDebt,WorkingCapital,Inventory,OperatingRevenue,CostOfRevenue,LongTermDebt,OperatingCashFlow,InvestingCashFlow,FinancingCashFlow,BeginningCashPosition,EndCashPosition,FreeCashFlow,RepaymentOfDebt,RepurchaseOfCapitalStock,CashDividendsPaid,CommonStockIssuance,ChangeInWorkingCapital,CapitalExpenditure,SaleOfInvestment,PurchaseOfInvestment,ChangeInInventory,PurchaseOfBusiness,StockBasedCompensation,InterestExpense,CurrentDebt,BasicEPS,CashAndCashEquivalents,TotalCapitalization,ShareIssued,EBITDA,NetPPE,AccountsReceivable,AccountsPayable,SellingGeneralAndAdministration,ResearchAndDevelopment,NetDebt,MarketCap,ChgInAccountReceivables,ChgInAccountPayable,PreferredStockEquity,PretaxIncome,TaxProvision,OrdinarySharesNumber,DepreciationAndAmortization,DeferredIncomeTax\n"]
    datasets = [inputs[i:i + chunk_size] for i in range(0, len(inputs), chunk_size)]

    for ds in datasets:
        print(ds)

        tickers = Ticker(ds)
        financial_stmt = tickers.get_financial_data(types, frequency=freq, trailing=True)

        df = pd.DataFrame(financial_stmt)
        reversed_df = df.iloc[::-1]

        for s, dr in reversed_df.iterrows():
            try:

                if s == "error":
                    continue

                currencyCode = dr["currencyCode"]
                periodType = dr["periodType"]
                totalRevenue = dr["TotalRevenue"]

                if freq == "A" and ((periodType == "12M" and math.isnan(totalRevenue)) or (periodType == "TTM" and math.isnan(totalRevenue)) or (periodType != "12M" and periodType != "TTM")  or currencyCode != "USD"):
                    continue
                elif freq == "Q" and  ((periodType == "3M" and math.isnan(totalRevenue)) or (periodType == "TTM" and math.isnan(totalRevenue)) or currencyCode != "USD" ):
                    continue

                asofDate = datetime.strptime(str(dr["asOfDate"]), "%Y-%m-%d %H:%M:%S")

                if periodType != "TTM" and freq == "A":
                    periodType = asofDate.year
                elif periodType != "TTM" and freq == "Q":
                    periodType = asofDate

                grossProfit = math.nan
                if "GrossProfit" in dr:
                    grossProfit = dr["GrossProfit"]

                operatingExpense = math.nan
                if "OperatingExpense" in dr:
                    operatingExpense = dr["OperatingExpense"]

                operatingIncome = math.nan
                if "OperatingIncome" in dr:
                    operatingIncome = dr["OperatingIncome"]

                ebit = math.nan
                if "EBIT" in dr:
                    ebit = dr["EBIT"]

                netIncome = math.nan
                if "NetIncome" in dr:
                    netIncome = dr["NetIncome"]

                stockHolderEquity = math.nan
                if "StockholdersEquity" in dr:
                    stockHolderEquity = dr["StockholdersEquity"]

                totalAssets = math.nan
                if "TotalAssets" in dr:
                    totalAssets = dr["TotalAssets"]

                totalLiabilities = math.nan
                if "TotalLiabilitiesNetMinorityInterest" in dr:
                    totalLiabilities = dr["TotalLiabilitiesNetMinorityInterest"]

                currentAssets = math.nan
                if "CurrentAssets" in dr:
                    currentAssets = dr["CurrentAssets"]

                currentLiabilities = math.nan
                if "CurrentLiabilities" in dr:
                    currentLiabilities = dr["CurrentLiabilities"]

                totalDebt = math.nan
                if "TotalDebt" in dr:
                    totalDebt = dr["TotalDebt"]

                workingCapital = math.nan
                if "WorkingCapital" in dr:
                    workingCapital = dr["WorkingCapital"]
 
                inventory = math.nan
                if "Inventory" in dr:
                    inventory = dr["Inventory"]            

                operatingRevenue = math.nan
                if "OperatingRevenue" in dr:
                    operatingRevenue = dr["OperatingRevenue"]    

                costOfRevenue = math.nan
                if "CostOfRevenue" in dr:
                    costOfRevenue = dr["CostOfRevenue"]  

                longtermDebt = math.nan
                if "LongTermDebt" in dr:
                    longtermDebt = dr["LongTermDebt"]  

                operatingCashFlow = math.nan
                if "OperatingCashFlow" in dr:
                    operatingCashFlow = dr["OperatingCashFlow"]  

                investingCashFlow = math.nan
                if "InvestingCashFlow" in dr:
                    investingCashFlow = dr["InvestingCashFlow"]  

                financingCashFlow = math.nan
                if "CashFlowFromContinuingFinancingActivities" in dr:
                    financingCashFlow = dr["CashFlowFromContinuingFinancingActivities"]  

                beginningCash = math.nan
                if "BeginningCashPosition" in dr:
                    beginningCash = dr["BeginningCashPosition"]  

                endCash = math.nan
                if "EndCashPosition" in dr:
                    endCash = dr["EndCashPosition"]  

                freeCashFlow = math.nan
                if "FreeCashFlow" in dr:
                    freeCashFlow = dr["FreeCashFlow"]      
  
                repaymentOfDebt = math.nan
                if "RepaymentOfDebt" in dr:
                    repaymentOfDebt = dr["RepaymentOfDebt"]  

                repurchaseOfStock = math.nan
                if "RepurchaseOfCapitalStock" in dr:
                    repurchaseOfStock = dr["RepurchaseOfCapitalStock"]  


                cashDividendsPaid = math.nan
                if "CashDividendsPaid" in dr:
                    cashDividendsPaid = dr["CashDividendsPaid"]  

                stockIssuance = math.nan
                if "CommonStockIssuance" in dr:
                    stockIssuance = dr["CommonStockIssuance"]
        
                chgInWorkingCapital = math.nan
                if "ChangeInWorkingCapital" in dr:
                    chgInWorkingCapital = dr["ChangeInWorkingCapital"]
        
                capExp = math.nan
                if "CapitalExpenditure" in dr:
                    capExp = dr["CapitalExpenditure"]

                salesOfInvestment = math.nan;
                if"SaleOfInvestment" in dr:
                    salesOfInvestment = dr["SaleOfInvestment"]

                purchaseOfInvestment = math.nan;
                if "PurchaseOfInvestment" in dr:
                    purchaseOfInvestment = dr["PurchaseOfInvestment"]


                chgInInventory = math.nan;
                if "ChangeInInventory" in dr:
                    chgInInventory = dr["ChangeInInventory"]

                purchaseOfBusiness = math.nan;
                if "PurchaseOfBusiness" in dr:
                    purchaseOfBusiness = dr["PurchaseOfBusiness"]
  
                stockCompensation = math.nan;
                if "StockBasedCompensation" in dr:
                    stockCompensation = dr["StockBasedCompensation"]

                interestExpense = math.nan;
                if "InterestExpense" in dr:
                    interestExpense = dr["InterestExpense"]

                currentDebt = math.nan;
                if "CurrentDebt" in dr:
                    currentDebt = dr["CurrentDebt"]

                basicEPS = math.nan;
                if "BasicEPS" in dr:
                    basicEPS = dr["BasicEPS"]

                cashEquivalents = math.nan
                if "CashCashEquivalentsAndShortTermInvestments" in dr:
                    cashEquivalents = dr["CashCashEquivalentsAndShortTermInvestments"]

                toalCapitalization = math.nan
                if "TotalCapitalization" in dr:
                    toalCapitalization = dr["TotalCapitalization"]
            
                sharesIssued = math.nan
                if "ShareIssued" in dr:
                    sharesIssued = dr["ShareIssued"]

                ebitda = math.nan
                if "EBITDA" in dr:
                    ebitda = dr["EBITDA"]
            
                netPPE = math.nan
                if "NetPPE" in dr:
                    netPPE = dr["NetPPE"]
            
                receivable = math.nan
                if "AccountsReceivable" in dr:
                    receivable = dr["AccountsReceivable"]
            
                payable = math.nan
                if "AccountsPayable" in dr:
                    payable = dr["AccountsPayable"]

                sga = math.nan
                if "SellingGeneralAndAdministration" in dr:
                    sga = dr["SellingGeneralAndAdministration"]

                rnd = math.nan
                if "ResearchAndDevelopment" in dr:
                    rnd = dr["ResearchAndDevelopment"]

                netDebt = math.nan
                if "NetDebt" in dr:
                    netDebt = dr["NetDebt"]

                marketCap = math.nan
                if "MarketCap" in dr:
                    marketCap = dr["MarketCap"]

                changesInAccountReceivables = math.nan
                if "ChangesInAccountReceivables" in dr:
                    changesInAccountReceivables = dr["ChangesInAccountReceivables"]

                changeInAccountPayable = math.nan
                if "ChangeInAccountPayable" in dr:
                    changeInAccountPayable = dr["ChangeInAccountPayable"]

                preferredStockEquity = math.nan
                if "PreferredStockEquity" in dr:
                    preferredStockEquity = dr["PreferredStockEquity"]

                pretaxIncome = math.nan
                if "PretaxIncome" in dr:
                    pretaxIncome = dr["PretaxIncome"]

                taxProvision = math.nan
                if "TaxProvision" in dr:
                    taxProvision = dr["TaxProvision"]

                sharesOutstanding = math.nan
                if "OrdinarySharesNumber" in dr:
                    sharesOutstanding = dr["OrdinarySharesNumber"]

                depreciationAndAmortization = math.nan
                if "DepreciationAndAmortization" in dr:
                    depreciationAndAmortization = dr["DepreciationAndAmortization"]

                deferredIncomeTax = math.nan
                if "DeferredIncomeTax" in dr:
                    deferredIncomeTax = dr["DeferredIncomeTax"]

            

                content.append(f"{s.upper()},{asofDate},{periodType},{currencyCode},{totalRevenue},{grossProfit},{operatingExpense},{operatingIncome},{ebit},{netIncome},{stockHolderEquity},{totalAssets},{totalLiabilities},{currentAssets},{currentLiabilities},{totalDebt},{workingCapital},{inventory},{operatingRevenue},{costOfRevenue},{longtermDebt},{operatingCashFlow},{investingCashFlow},{financingCashFlow},{beginningCash},{endCash},{freeCashFlow},{repaymentOfDebt},{repurchaseOfStock},{cashDividendsPaid},{stockIssuance},{chgInWorkingCapital},{capExp},{salesOfInvestment},{purchaseOfInvestment},{chgInInventory},{purchaseOfBusiness},{stockCompensation},{interestExpense},{currentDebt},{basicEPS},{cashEquivalents},{toalCapitalization},{sharesIssued},{ebitda},{netPPE},{receivable},{payable},{sga},{rnd},{netDebt},{marketCap},{changesInAccountReceivables},{changeInAccountPayable},{preferredStockEquity},{pretaxIncome},{taxProvision},{sharesOutstanding},{depreciationAndAmortization},{deferredIncomeTax}\n")

            except Exception as e:
                print(f"error on parsing financial data {s} - code: {e}")

        time.sleep(time_out) 

    WriteToLocal("".join(content),f"financial_statements_{freq.lower()}.txt")

def GetSummary(inputs):
    # 10-Year Treasury Yield ticker symbol

    print('Fetching summary details...')

    content = ["Symbol,Beta,DayHigh\n"]
    datasets = [inputs[i:i + chunk_size] for i in range(0, len(inputs), chunk_size)]
    datasets.append('^TNX') #10 treasury yield

    for ds in datasets:
        print (ds)

        tickers = Ticker(ds)
        summary = tickers.summary_detail

        for s, dr in summary.items():
            try:

                if s == "error":
                    continue

                currency = None
                if "currency" in dr:
                    currency = dr["currency"]

                if(currency != 'USD'):
                    continue

                beta = math.nan
                if "beta" in dr:
                    beta = dr["beta"]
           
                riskfree = math.nan
                if "dayHigh" in dr:
                    riskfree = dr["dayHigh"]
           
                content.append(f"{s.upper()},{beta},{riskfree}\n")
           
            except Exception as e:
                print(f"err on parsing summary : {s} - {e}")  

        time.sleep(time_out) 

    WriteToLocal("".join(content),"summary_details.txt")


GetProfiles(inputs)
GetRealTimeQuotes(inputs)
GetSummary(inputs)
GetValuationMeasures(inputs)
GetFinancialStatements(inputs,'A') 
GetFinancialStatements(inputs,'Q') 















